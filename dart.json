{
  // Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "StatePatternBase": {
    "prefix": "statebase",
    "body": [
      "sealed class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {}",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Empty extends ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {}",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Loading extends ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {}",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Success extends ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
      "",
      "  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Success();",
      "}",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Failure extends ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
      "  final String message;",
      "",
      "  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Failure(this.message);",
      "}",
    ],
    "description": "Get file name and create a state sealed class to implement state pattern"
  },
  "NotifierStore": {
    "prefix": "storenotifier",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends ValueNotifier<${1:BaseStateClass}> {",
      "    ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}() : super(${2:InitialState});",
      "",
      "}",
    ],
    "description": "Get file name and create a store with state pattern value notifier"
  },
  "FlowDelegate": {
    "prefix": "flow",
    "body": [
      "import 'package:common_dependencies/presentation.dart';",
      "",
      "abstract class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
      "    $0",
      "}",
      "",
      "class ${TM_FILENAME_BASE/(.*[^(delegate)])|(delegate)/${1:/pascalcase}/gm}Flow implements ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
      "    @override",
      "    $0",
      "}",
      "",
    ],
    "description": "Get file name and create a delegate for navigation"
  },
  "FileNameClass": {
    "prefix": "fileclass",
    "body": [
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
      "  $0",
      "}"
    ],
    "description": "Get file name and create class with cammelCase"
  },
  "FileName": {
    "prefix": "filename",
    "body": [
      "${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}"
    ],
    "description": "Get file name and create class with cammelCase"
  },
  "FileNameAbstractClass": {
    "prefix": "absfileclass",
    "body": [
      "abstract class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
      "  ${1:}",
      "}"
    ],
    "description": "Get file name and create abstract class with cammelCase"
  },
  "Usecase Test": {
    "prefix": "uctest",
    "body": [
      "import 'package:flutter_test/flutter_test.dart';",
      "",
      "class ${2:className}Mock extends Mock implements I${2:className}Repository {}",
      "",
      "main() {",
      "  ${1:usecase} usecase;",
      "  I${2:className}Repository repository;",
      "",
      "  setUp(() {",
      "    repository = ${2:className}Mock();",
      "    usecase = ${1:usecase}(repository);",
      "  });",
      "}"
    ],
    "description": "Usecase Test"
  },
  "Infra Repository Test": {
    "prefix": "repotest",
    "body": [
      "import 'package:flutter_test/flutter_test.dart';",
      "",
      "class ${2:className}Mock extends Mock implements I${2:className}Datasource {}",
      "",
      "main() {",
      "  ${1:repository} repository;",
      "  I${2:className}Datasource datasource;",
      "",
      "  setUp(() {",
      "    datasource = ${2:className}Mock();",
      "    repository = ${1:repository}(datasource);",
      "  });",
      "}"
    ],
    "description": "Infra Repository Test"
  },
  "External Datasource Test": {
    "prefix": "dstest",
    "body": [
      "import 'package:flutter_test/flutter_test.dart';",
      "",
      "class ${2:className}Mock extends Mock implements I${2:className} {}",
      "",
      "main() {",
      "  ${1:datasource} datasource;",
      "  I${2:className} httpServiceMock;",
      "",
      "  setUp(() {",
      "    httpServiceMock = ${2:className}Mock();",
      "    datasource = ${1:datasource}(httpServiceMock);",
      "  });",
      "}"
    ],
    "description": "External Datasource Test"
  },
  "Stateful Widget": {
    "prefix": "ful",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends StatefulWidget {",
      "   const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({super.key});",
      "",
      "   @override",
      "   State<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}> createState() => _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}State();",
      "}",
      "",
      "class _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}State extends State<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}> {",
      "   @override",
      "   Widget build(BuildContext context) {",
      "     return Container();",
      "   }",
      "}",
    ],
    "description": "Flutter Stateful Widget"
  },
  "Stateless Widget": {
    "prefix": "less",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends StatelessWidget {",
      "   const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({super.key});",
      "",
      "   @override",
      "   Widget build(BuildContext context) {",
      "     return Container();",
      "   }",
      "}",
    ],
    "description": "Flutter Stateless Widget"
  },
  "Mock class": {
    "prefix": "mock",
    "body": [
      "class Mock${2:className} extends Mock implements ${2:className} {}",
    ],
    "description": "Mock class to test"
  }
}
